// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PriceTracker.Infrastructure.Migrations
{
    [DbContext(typeof(PriceTrackerDbContext))]
    [Migration("20250519103311_InitalDataSeedAndDbCreation")]
    partial class InitalDataSeedAndDbCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f59",
                            ConcurrencyStamp = "7c1707e8-8f7e-4e75-915c-fc70f06358b3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f60",
                            ConcurrencyStamp = "465593d2-ddaf-45dc-a1d2-af9247c94f76",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f61",
                            ConcurrencyStamp = "ba25e161-7171-4e2c-8461-d7d615f6e685",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e",
                            RoleId = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f59"
                        },
                        new
                        {
                            UserId = "8d1f0bdc-f59a-4c8d-9549-98673c32c25d",
                            RoleId = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f60"
                        },
                        new
                        {
                            UserId = "cf41999b-9cad-4b75-977d-a2fdb3d02e77",
                            RoleId = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f61"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Expense identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("AmountSpent")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Amount of money spent");

                    b.Property<DateTime>("DateSpent")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the expense was made");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Description for maked expense");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int")
                        .HasComment("Expense type");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses", t =>
                        {
                            t.HasComment("Expense Db model");
                        });

                    b.HasData(
                        new
                        {
                            ExpenseId = 1,
                            AmountSpent = 31.59m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Заредена газ за пътуване до София",
                            ExpenseType = 5,
                            ProductId = 7,
                            StoreId = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 2,
                            AmountSpent = 4.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Покупка на яйца размер L",
                            ExpenseType = 2,
                            ProductId = 1,
                            StoreId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 3,
                            AmountSpent = 14.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Кашкавал",
                            ExpenseType = 2,
                            ProductId = 2,
                            StoreId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 4,
                            AmountSpent = 50.00m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Бензин",
                            ExpenseType = 5,
                            ProductId = 4,
                            StoreId = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 5,
                            AmountSpent = 12.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Сирене за баница",
                            ExpenseType = 2,
                            ProductId = 3,
                            StoreId = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 6,
                            AmountSpent = 12.50m,
                            DateSpent = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Месо за мезе",
                            ExpenseType = 2,
                            ProductId = 6,
                            StoreId = 2,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.MonthlyBudget", b =>
                {
                    b.Property<int>("BudgedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Budged identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgedId"));

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Total amount of money or budged we have for the current month");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("Month we spend current budged in");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("BudgedId");

                    b.HasIndex("UserId", "Month")
                        .IsUnique();

                    b.ToTable("MonthlyBudgets", t =>
                        {
                            t.HasComment("MonthlyBudget Db model");
                        });

                    b.HasData(
                        new
                        {
                            BudgedId = 1,
                            BudgetAmount = 1200m,
                            Month = 4,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 2,
                            BudgetAmount = 1300m,
                            Month = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 3,
                            BudgetAmount = 1300m,
                            Month = 6,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Notification identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Time when the notification was created");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasComment("Track if the message is readed or not");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Notification message");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time of the notification - due Date");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasComment("Task identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Notification Db model");
                        });

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = true,
                            Message = "Reminder to buy a food for next two week",
                            NotificationTime = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Reminder to fill up the car with gas and check it, so it is ready for the trip next week.",
                            NotificationTime = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 2,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = true,
                            Message = "Check and pay the bills",
                            NotificationTime = new DateTime(2025, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 3,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Price identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.Property<DateTime?>("DateChecked")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the record for the price on a product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Current price of a product in the store");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    b.HasKey("PriceId");

                    b.HasIndex("StoreId");

                    b.HasIndex("ProductId", "StoreId", "DateChecked")
                        .IsUnique()
                        .HasFilter("[DateChecked] IS NOT NULL");

                    b.ToTable("Prices", t =>
                        {
                            t.HasComment("Price Db model");
                        });

                    b.HasData(
                        new
                        {
                            PriceId = 1,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            SellingPrice = 4.50m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 2,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            SellingPrice = 17.59m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 3,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            SellingPrice = 16.00m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 4,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            SellingPrice = 2.55m,
                            StoreId = 8
                        },
                        new
                        {
                            PriceId = 5,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            SellingPrice = 1.55m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 6,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6,
                            SellingPrice = 24.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 7,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 7,
                            SellingPrice = 1.25m,
                            StoreId = 8
                        },
                        new
                        {
                            PriceId = 8,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 8,
                            SellingPrice = 2.50m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 9,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 9,
                            SellingPrice = 5.50m,
                            StoreId = 3
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Product brand");

                    b.Property<int>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasComment("Product category");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Product name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Product quantity");

                    b.HasKey("ProductId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product Db model");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Нашата ферма",
                            Category = 3,
                            ProductName = "Яйца",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Маджаров",
                            Category = 3,
                            ProductName = "Кашкавал от краве мляко",
                            Quantity = 400
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Лакрима",
                            Category = 3,
                            ProductName = "Сирене",
                            Quantity = 700
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = " А95",
                            Category = 6,
                            ProductName = "Бензин",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "Верея",
                            Category = 3,
                            ProductName = "Кисело мляко 2%",
                            Quantity = 400
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Орехите",
                            Category = 3,
                            ProductName = "Филе Елена",
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "Auto-gas",
                            Category = 6,
                            ProductName = "Газ",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "Добруджа",
                            Category = 3,
                            ProductName = "Хляб с лимец",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "Верея",
                            Category = 3,
                            ProductName = "Прясно мляко лешник",
                            Quantity = 1000
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Store name");

                    b.HasKey("StoreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stores", t =>
                        {
                            t.HasComment("Store Db model");
                        });

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Kaufland"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Lidl"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Billa"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Metro"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "BBB"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "T-Market"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "Marketplace"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "Lukoil"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Task identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("The date that task is created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Description of the current task");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Whitin the day that current task must be finished");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Task priority level");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasComment("Task status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Title of the current task");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoItems", t =>
                        {
                            t.HasComment("Tasks Db model");
                        });

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy food for the next two weeks",
                            DueDate = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 1,
                            Title = "Shopping",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 2,
                            CreatedAt = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Get the car ready for the trip",
                            DueDate = new DateTime(2025, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 2,
                            Title = "Fill with fuel",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 3,
                            CreatedAt = new DateTime(2025, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pay the bills for this month.",
                            DueDate = new DateTime(2025, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 3,
                            Title = "House bills",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("User DB Model");
                        });

                    b.HasData(
                        new
                        {
                            Id = "cf41999b-9cad-4b75-977d-a2fdb3d02e77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "986e542c-d39f-4e54-9e25-7bf36b504214",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@MAIL.COM",
                            NormalizedUserName = "GUEST@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMt2rKCgSayjQhiYsJD025Esdv3M3nKFcypJW660Q+DtBdHAB7OkPsEt+sPxHsXvVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f35d6841-2d05-4626-905d-673c28968610",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        },
                        new
                        {
                            Id = "8d1f0bdc-f59a-4c8d-9549-98673c32c25d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bde1c9b-f966-4f2e-a16e-a589922a62fb",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0Lir9KBA1yR/yajkXuX8lUCIQhfGitZ9Muj6hGH1dlIefAzynAayEdE8VH4rWPbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3839d9d-bcee-4c9b-84c5-ccf637d49b62",
                            TwoFactorEnabled = false,
                            UserName = "user@mail.com"
                        },
                        new
                        {
                            Id = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38e6855b-4c3b-441b-b99f-d25ac606e3b4",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEChV3s80DpUHCQxoTrErIVHXJqDEvRkLOAFT5xl3UwwzCwDk+/WAzkcNdEsaqPF58Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a5e2a1f-7d8c-48a2-8edb-520203064fef",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Expense", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Expenses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Expenses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.MonthlyBudget", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("MonthlyBudgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Notification", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.ToDoItem", "Task")
                        .WithMany("Notifications")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Price", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Prices")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Store", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("MonthlyBudgets");

                    b.Navigation("Notifications");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PriceTracker.Infrastructure.Migrations
{
    [DbContext(typeof(PriceTrackerDbContext))]
    [Migration("20250601180506_InitialCreationOfDataBaseWithJson")]
    partial class InitialCreationOfDataBaseWithJson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f59",
                            ConcurrencyStamp = "ca08276f-4252-4392-beaf-3c2675e893b7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f60",
                            ConcurrencyStamp = "464a71ab-5a1a-4bee-85d7-5cd0d8beac63",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e",
                            RoleId = "c3a2cde1-caac-4a6c-a24f-1b5d35b47f59"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Expense identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("AmountSpent")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Amount of money spent");

                    b.Property<DateTime>("DateSpent")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the expense was made");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Description for maked expense");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int")
                        .HasComment("Expense type");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses", t =>
                        {
                            t.HasComment("Expense Db model");
                        });

                    b.HasData(
                        new
                        {
                            ExpenseId = 1,
                            AmountSpent = 31.59m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Заредена газ за пътуване до София",
                            ExpenseType = 5,
                            ProductId = 7,
                            StoreId = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 2,
                            AmountSpent = 4.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Покупка на яйца размер L",
                            ExpenseType = 2,
                            ProductId = 1,
                            StoreId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 3,
                            AmountSpent = 14.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Кашкавал",
                            ExpenseType = 2,
                            ProductId = 2,
                            StoreId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 4,
                            AmountSpent = 50.00m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Бензин",
                            ExpenseType = 5,
                            ProductId = 4,
                            StoreId = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 5,
                            AmountSpent = 12.50m,
                            DateSpent = new DateTime(2025, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Сирене за баница",
                            ExpenseType = 2,
                            ProductId = 3,
                            StoreId = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 6,
                            AmountSpent = 12.50m,
                            DateSpent = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Месо за мезе",
                            ExpenseType = 2,
                            ProductId = 6,
                            StoreId = 2,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 7,
                            AmountSpent = 3.20m,
                            DateSpent = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Кисело мляко за закуска",
                            ExpenseType = 2,
                            ProductId = 5,
                            StoreId = 3,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 8,
                            AmountSpent = 2.50m,
                            DateSpent = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Хляб за домакински нужди",
                            ExpenseType = 6,
                            ProductId = 8,
                            StoreId = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 9,
                            AmountSpent = 5.50m,
                            DateSpent = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Прясно мляко с лешник",
                            ExpenseType = 2,
                            ProductId = 9,
                            StoreId = 3,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            ExpenseId = 10,
                            AmountSpent = 125.80m,
                            DateSpent = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Месечна сметка за ток",
                            ExpenseType = 3,
                            ProductId = 41,
                            StoreId = 16,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.MonthlyBudget", b =>
                {
                    b.Property<int>("BudgedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Budged identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgedId"));

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Total amount of money or budged we have for the current month");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("Month we spend current budged in");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("BudgedId");

                    b.HasIndex("UserId", "Month")
                        .IsUnique();

                    b.ToTable("MonthlyBudgets", t =>
                        {
                            t.HasComment("MonthlyBudget Db model");
                        });

                    b.HasData(
                        new
                        {
                            BudgedId = 1,
                            BudgetAmount = 1200.00m,
                            Month = 4,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 2,
                            BudgetAmount = 1300.00m,
                            Month = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 3,
                            BudgetAmount = 1300.00m,
                            Month = 6,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 4,
                            BudgetAmount = 1400.00m,
                            Month = 7,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 5,
                            BudgetAmount = 1350.00m,
                            Month = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 6,
                            BudgetAmount = 1450.00m,
                            Month = 9,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 7,
                            BudgetAmount = 1500.00m,
                            Month = 10,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 8,
                            BudgetAmount = 1250.00m,
                            Month = 11,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 9,
                            BudgetAmount = 1600.00m,
                            Month = 12,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            BudgedId = 10,
                            BudgetAmount = 1550.00m,
                            Month = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Notification identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Time when the notification was created");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasComment("Track if the message is readed or not");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Notification message");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time of the notification - due Date");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasComment("Task identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Notification Db model");
                        });

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = true,
                            Message = "Reminder to buy a food for next two week",
                            NotificationTime = new DateTime(2025, 6, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 1,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Reminder to fill up the car with gas and check it, so it is ready for the trip next week.",
                            NotificationTime = new DateTime(2025, 6, 9, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 2,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = true,
                            Message = "Check and pay the bills",
                            NotificationTime = new DateTime(2025, 6, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 3,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Don't forget your weekly grocery shopping is due tomorrow!",
                            NotificationTime = new DateTime(2025, 6, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 4,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Time to schedule your dentist appointment",
                            NotificationTime = new DateTime(2025, 6, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 5,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 6,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Reading time! Your book deadline is approaching",
                            NotificationTime = new DateTime(2025, 6, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 6,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 7,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = true,
                            Message = "Daily workout reminder - let's get moving!",
                            NotificationTime = new DateTime(2025, 6, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 7,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 8,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Start planning your vacation - deadline coming up!",
                            NotificationTime = new DateTime(2025, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 8,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 9,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Time to change your resume with recent achievements",
                            NotificationTime = new DateTime(2025, 6, 11, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 9,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            NotificationId = 10,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsRead = false,
                            Message = "Learning reminder: Continue with your React.js course",
                            NotificationTime = new DateTime(2025, 7, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TaskId = 10,
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Price identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.Property<DateTime?>("DateChecked")
                        .HasColumnType("datetime2")
                        .HasComment("The date of the record for the price on a product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Current price of a product in the store");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    b.HasKey("PriceId");

                    b.HasIndex("StoreId");

                    b.HasIndex("ProductId", "StoreId", "DateChecked")
                        .IsUnique()
                        .HasFilter("[DateChecked] IS NOT NULL");

                    b.ToTable("Prices", t =>
                        {
                            t.HasComment("Price Db model");
                        });

                    b.HasData(
                        new
                        {
                            PriceId = 1,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            SellingPrice = 4.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 2,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            SellingPrice = 4.49m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 3,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            SellingPrice = 5.29m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 4,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            SellingPrice = 18.90m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 5,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            SellingPrice = 17.50m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 6,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            SellingPrice = 19.99m,
                            StoreId = 18
                        },
                        new
                        {
                            PriceId = 7,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            SellingPrice = 21.50m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 8,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            SellingPrice = 20.99m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 9,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            SellingPrice = 35.90m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 10,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            SellingPrice = 32.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 11,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            SellingPrice = 3.45m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 12,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            SellingPrice = 3.29m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 13,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            SellingPrice = 3.59m,
                            StoreId = 18
                        },
                        new
                        {
                            PriceId = 14,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6,
                            SellingPrice = 2.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 15,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6,
                            SellingPrice = 2.95m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 16,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6,
                            SellingPrice = 2.79m,
                            StoreId = 9
                        },
                        new
                        {
                            PriceId = 17,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 7,
                            SellingPrice = 24.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 18,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 7,
                            SellingPrice = 23.50m,
                            StoreId = 18
                        },
                        new
                        {
                            PriceId = 19,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 8,
                            SellingPrice = 18.99m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 20,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 8,
                            SellingPrice = 19.49m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 21,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 9,
                            SellingPrice = 7.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 22,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 9,
                            SellingPrice = 7.99m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 23,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 10,
                            SellingPrice = 4.50m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 24,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 10,
                            SellingPrice = 4.39m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 25,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 10,
                            SellingPrice = 4.69m,
                            StoreId = 8
                        },
                        new
                        {
                            PriceId = 26,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 11,
                            SellingPrice = 2.45m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 27,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 11,
                            SellingPrice = 2.29m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 28,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 12,
                            SellingPrice = 1.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 29,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 12,
                            SellingPrice = 1.79m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 30,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 12,
                            SellingPrice = 1.99m,
                            StoreId = 9
                        },
                        new
                        {
                            PriceId = 31,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 13,
                            SellingPrice = 4.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 32,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 13,
                            SellingPrice = 5.29m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 33,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 13,
                            SellingPrice = 4.79m,
                            StoreId = 7
                        },
                        new
                        {
                            PriceId = 34,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 14,
                            SellingPrice = 3.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 35,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 14,
                            SellingPrice = 3.79m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 36,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 15,
                            SellingPrice = 2.29m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 37,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 15,
                            SellingPrice = 2.49m,
                            StoreId = 8
                        },
                        new
                        {
                            PriceId = 38,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 16,
                            SellingPrice = 2.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 39,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 16,
                            SellingPrice = 3.19m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 40,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 17,
                            SellingPrice = 3.45m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 41,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 17,
                            SellingPrice = 3.29m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 42,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 18,
                            SellingPrice = 2.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 43,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 18,
                            SellingPrice = 2.69m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 44,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 19,
                            SellingPrice = 2.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 45,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 19,
                            SellingPrice = 2.79m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 46,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 20,
                            SellingPrice = 2.79m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 47,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 20,
                            SellingPrice = 2.69m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 48,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 21,
                            SellingPrice = 4.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 49,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 21,
                            SellingPrice = 5.19m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 50,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 22,
                            SellingPrice = 1.29m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 51,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 22,
                            SellingPrice = 1.19m,
                            StoreId = 9
                        },
                        new
                        {
                            PriceId = 52,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 23,
                            SellingPrice = 18.90m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 53,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 24,
                            SellingPrice = 22.50m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 54,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 25,
                            SellingPrice = 1.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 55,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 25,
                            SellingPrice = 2.19m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 56,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 26,
                            SellingPrice = 2.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 57,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 26,
                            SellingPrice = 2.99m,
                            StoreId = 18
                        },
                        new
                        {
                            PriceId = 58,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 27,
                            SellingPrice = 12.90m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 59,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 28,
                            SellingPrice = 4.59m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 60,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 28,
                            SellingPrice = 4.29m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 61,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 29,
                            SellingPrice = 5.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 62,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 30,
                            SellingPrice = 6.49m,
                            StoreId = 4
                        },
                        new
                        {
                            PriceId = 63,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 31,
                            SellingPrice = 4.89m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 64,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 31,
                            SellingPrice = 5.19m,
                            StoreId = 3
                        },
                        new
                        {
                            PriceId = 65,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 32,
                            SellingPrice = 5.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 66,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 33,
                            SellingPrice = 3.99m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 67,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 33,
                            SellingPrice = 3.79m,
                            StoreId = 2
                        },
                        new
                        {
                            PriceId = 68,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 34,
                            SellingPrice = 1.39m,
                            StoreId = 1
                        },
                        new
                        {
                            PriceId = 69,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 34,
                            SellingPrice = 1.29m,
                            StoreId = 5
                        },
                        new
                        {
                            PriceId = 70,
                            DateChecked = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 35,
                            SellingPrice = 4.79m,
                            StoreId = 1
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Product brand");

                    b.Property<int>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasComment("Product category");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Product name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Product quantity");

                    b.HasKey("ProductId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product Db model");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Родопи",
                            Category = 3,
                            ProductName = "Ябълки Златна превъзходна",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Лудогорско",
                            Category = 3,
                            ProductName = "Пилешко филе",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Градус",
                            Category = 3,
                            ProductName = "Пуешко филе",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "Еко Меат",
                            Category = 3,
                            ProductName = "Телешко бон филе",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "БМК",
                            Category = 3,
                            ProductName = "Натурален йогурт 3.6%",
                            Quantity = 400
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Верея",
                            Category = 3,
                            ProductName = "Прясно мляко 3.6%",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "Маджаров",
                            Category = 3,
                            ProductName = "Кашкавал от краве мляко",
                            Quantity = 400
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "Лакрима",
                            Category = 3,
                            ProductName = "Сирене от краве мляко",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "Верея",
                            Category = 3,
                            ProductName = "Масло краве 82%",
                            Quantity = 200
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "Нашата ферма",
                            Category = 3,
                            ProductName = "Яйца размер L",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 11,
                            Brand = "Добруджа",
                            Category = 3,
                            ProductName = "Хляб пълнозърнест",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 12,
                            Brand = "Булгарплод",
                            Category = 3,
                            ProductName = "Картофи",
                            Quantity = 2000
                        },
                        new
                        {
                            ProductId = 13,
                            Brand = "Марица Земеделие",
                            Category = 3,
                            ProductName = "Домати",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 14,
                            Brand = "Марица Земеделие",
                            Category = 3,
                            ProductName = "Краставици",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 15,
                            Brand = "Булгарплод",
                            Category = 3,
                            ProductName = "Лук",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 16,
                            Brand = "Булгарплод",
                            Category = 3,
                            ProductName = "Моркови",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 17,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Ориз",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 18,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Макарони",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 19,
                            Brand = "Добруджа",
                            Category = 3,
                            ProductName = "Брашно тип 500",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 20,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Захар бяла кристална",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 21,
                            Brand = "Златна Добруджа",
                            Category = 3,
                            ProductName = "Олио",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 22,
                            Brand = "Солница",
                            Category = 3,
                            ProductName = "Сол",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 23,
                            Brand = "Орехите",
                            Category = 3,
                            ProductName = "Колбас Елена",
                            Quantity = 100
                        },
                        new
                        {
                            ProductId = 24,
                            Brand = "Карлово Мес",
                            Category = 3,
                            ProductName = "Луканка",
                            Quantity = 200
                        },
                        new
                        {
                            ProductId = 25,
                            Brand = "Дерони",
                            Category = 3,
                            ProductName = "Зеле",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 26,
                            Brand = "БМК",
                            Category = 3,
                            ProductName = "Айран",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 27,
                            Brand = "Български мед",
                            Category = 3,
                            ProductName = "Мед полифлорен",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 28,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Фасул бял",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 29,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Леща червена",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 30,
                            Brand = "Арпа",
                            Category = 3,
                            ProductName = "Нахут",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 31,
                            Brand = "Дерони",
                            Category = 3,
                            ProductName = "Консерва риба тон",
                            Quantity = 160
                        },
                        new
                        {
                            ProductId = 32,
                            Brand = "Дерони",
                            Category = 3,
                            ProductName = "Консерва пъстърва",
                            Quantity = 200
                        },
                        new
                        {
                            ProductId = 33,
                            Brand = "Рила",
                            Category = 3,
                            ProductName = "Сок портокал 100%",
                            Quantity = 1000
                        },
                        new
                        {
                            ProductId = 34,
                            Brand = "Михалково",
                            Category = 3,
                            ProductName = "Минерална вода",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 35,
                            Brand = "Верея",
                            Category = 3,
                            ProductName = "Чай черен пакетчета",
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = 36,
                            Brand = "OMV",
                            Category = 6,
                            ProductName = "Дизелово гориво",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 37,
                            Brand = "Лукойл",
                            Category = 6,
                            ProductName = "Бензин А95",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 38,
                            Brand = "Пропанола",
                            Category = 6,
                            ProductName = "Пропан-бутан",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 39,
                            Brand = "Auto Gas",
                            Category = 6,
                            ProductName = "Газ пропан за кола",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 40,
                            Brand = "Shell",
                            Category = 6,
                            ProductName = "Бензин А98",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 41,
                            Brand = "ЧЕЗ",
                            Category = 9,
                            ProductName = "Ток домакински",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 42,
                            Brand = "Софийска вода",
                            Category = 9,
                            ProductName = "Вода канализация",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 43,
                            Brand = "Топлофикация София",
                            Category = 9,
                            ProductName = "Отопление топлофикация",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 44,
                            Brand = "Спортмаркет",
                            Category = 5,
                            ProductName = "Футболна топка",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 45,
                            Brand = "Пулс Фитнес",
                            Category = 5,
                            ProductName = "Абонамент фитнес",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 46,
                            Brand = "Софарма",
                            Category = 4,
                            ProductName = "Лекарства витамини",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = 47,
                            Brand = "Лавена",
                            Category = 8,
                            ProductName = "Почистващ препарат",
                            Quantity = 500
                        },
                        new
                        {
                            ProductId = 48,
                            Brand = "Комикс БГ",
                            Category = 10,
                            ProductName = "Детски играчки",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 49,
                            Brand = "Анубис",
                            Category = 7,
                            ProductName = "Книга учебна",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 50,
                            Brand = "А1",
                            Category = 9,
                            ProductName = "Мобилен интернет",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Store identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Store name");

                    b.HasKey("StoreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Stores", t =>
                        {
                            t.HasComment("Store Db model");
                        });

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Kaufland"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Lidl"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Billa"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Metro"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "Fantastico"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "Piccadilly"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "T-Market"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "CBA"
                        },
                        new
                        {
                            StoreId = 9,
                            Name = "Penny Market"
                        },
                        new
                        {
                            StoreId = 10,
                            Name = "Lukoil"
                        },
                        new
                        {
                            StoreId = 11,
                            Name = "Shell"
                        },
                        new
                        {
                            StoreId = 12,
                            Name = "OMV"
                        },
                        new
                        {
                            StoreId = 13,
                            Name = "Petrol"
                        },
                        new
                        {
                            StoreId = 14,
                            Name = "EKO"
                        },
                        new
                        {
                            StoreId = 15,
                            Name = "Т-маркет"
                        },
                        new
                        {
                            StoreId = 16,
                            Name = "EVN"
                        },
                        new
                        {
                            StoreId = 17,
                            Name = "ВИК Пловдив"
                        },
                        new
                        {
                            StoreId = 18,
                            Name = "BBB"
                        },
                        new
                        {
                            StoreId = 19,
                            Name = "Аптеки 366"
                        },
                        new
                        {
                            StoreId = 20,
                            Name = "X-fit"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Task identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("The date that task is created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Description of the current task");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Whitin the day that current task must be finished");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Task priority level");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasComment("Task status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Title of the current task");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoItems", t =>
                        {
                            t.HasComment("Tasks Db model");
                        });

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy food for the next two weeks",
                            DueDate = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            TaskStatus = 1,
                            Title = "Shopping",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 2,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Get the car ready for the trip",
                            DueDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 3,
                            TaskStatus = 2,
                            Title = "Fill with fuel",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pay the bills for this month.",
                            DueDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            TaskStatus = 3,
                            Title = "House bills",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 4,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Buy groceries",
                            DueDate = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            TaskStatus = 1,
                            Title = "Weekly grocery shopping",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 5,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Book routine dental checkup for next month",
                            DueDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 1,
                            Title = "Schedule dentist appointment",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 6,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Finish reading 'The Clean Coder' by Robert Martin",
                            DueDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 2,
                            Title = "Read book",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 7,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete 30-minute workout session",
                            DueDate = new DateTime(2025, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            TaskStatus = 1,
                            Title = "Exercise routine",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 8,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Research and book summer vacation destination and accommodation",
                            DueDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 1,
                            Title = "Plan vacation",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 9,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Add recent projects and skills to professional resume",
                            DueDate = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            TaskStatus = 1,
                            Title = "The resume must be updated",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        },
                        new
                        {
                            TaskId = 10,
                            CreatedAt = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete online course on React.js fundamentals",
                            DueDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            TaskStatus = 1,
                            Title = "Learn new technology",
                            UserId = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e"
                        });
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("User DB Model");
                        });

                    b.HasData(
                        new
                        {
                            Id = "56f4b198-3f3e-4f72-9a80-7d903bf24a1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fff35fac-e197-47b2-8576-ff2c8073d7a4",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENLHgRqrtTjfuK+8WmygVjKZm6BxmqmMVWJvRWGObQ3HpLibvqVQum1JEKBQIKxnEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "625d125f-8ca7-4245-bfc8-70319603ceeb",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Expense", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Expenses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Expenses")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.MonthlyBudget", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("MonthlyBudgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Notification", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.ToDoItem", "Task")
                        .WithMany("Notifications")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Price", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PriceTracker.Infrastructure.Data.Models.Store", "Store")
                        .WithMany("Prices")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.HasOne("PriceTracker.Infrastructure.Data.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Product", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.Store", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.ToDoItem", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("PriceTracker.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("MonthlyBudgets");

                    b.Navigation("Notifications");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
